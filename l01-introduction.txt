Topic: The Study of Computation From A Mathematical Viewpoint
Date: Jan. 8, 2013
Handouts: scheme-intro.shtml
Reading: SICP 1.1 to 1.1.4 (pg. 1-13)

Outline for the day:
   - Administrivia
   - What CS 230 is "about"
   - A bit about Logic, the Lambda Calculus, and Scheme


ADMINISTRIVIA (a.k.a. "Course Information")

CS230 course staff:

Professor Bruce R. Donald
Rupert Freeman, Grad TA
Hunter Nisonoff,  Ugrad TA  
Tyler Nisonoff,  Ugrad TA  

  * Two lectures a week (Donald)
  * One recitation a week (Grad and Ugrad TAs)
    - Cover 
        - new material,
        - Examples
        - Questions and Answers
    Recitations times: Friday

 * Demo sessions,  on Racket. This week during recitations!
   - Bring your laptop Friday
   - Attendance is required at recitations
   - please save course software questions until recitations.

--- Important course structure information:

0. There are two textbooks:

Cliff Stein's  textbook with Scott Drysdale and Ken Bogart, "Discrete
Mathematics." We will call this book SDB, after the authors.

Abelson and Sussman's textbook "Structure and Interpretation of
Computer Programs." We call this SICP.

You can buy the second book, but it is freely available online:
URL: 
http://www.cs.duke.edu/donaldlab/Teaching/discretemath/2013/books/sicp-abelson-sussman.pdf

1. Homework:
   Five large problem sets (1-2 weeks each):    45%
   A number of short assignments:               10% total
   Three exams (2 midterms, 1 final):           15% each (45% total)

Homework counts for more than half of your grade, so DO keep up on it.
Problem sets in particular are worth a lot, so do not fall behind on
them.

 - Homework is due no later than class time on the due date.

 - No late homework will be accepted.  But, in return, we'll make sure
   you get everything back quickly.

 - You must turn in BOTH:
   1. A hard-copy printout of your code, in class
   2. Upload your assigment to Sakai.
      This is so we can run your code, and possibly analyze it electronically.

   Specific instructions on each assignment:  Read them carefully!

 - Except on PS-1, you may work in pairs on problem sets.

 - You must work ALONE on short assignments.

 - Whenever you work in a pair, you both hand in a SINGLE joint assignment:
   1. You must work with the same person for the entire assignment.
   2. You may not share code with anyone else besides your partner.

   Cheating is a VERY serious issue, and we take it as such; please
   read over the Course Information and the Duke Honour Code.

   See the course info page on the web.  If you are ever unsure about
   anything, please ask first!

Abbreviations:
 The two textbooks are called  SDB and SICP. See
 http://www.cs.duke.edu/donaldlab/Teaching/discretemath/2013/textbooks.html


--- The Web Site

The course web page is at

http://www.cs.duke.edu/~brd/Teaching/dm/
  or
http://www.cs.duke.edu/donaldlab/Teaching/discretemath/2013/
(These are the same page).

Basic structure:
 - Announcements:                announce.shtml
 - Handouts, assignments, etc.:  materials.shtml
 - General course information:   info.shtml
 - Course software:              software.shtml

PS-1 is available now, due Monday Jan 20.

--- The Software

We are using a Scheme system called "Racket" from the PLT group
(originally from Rice, now lots of places). Sometimes called
"DrRacket" (pronounced "Doctor Racket").

On top of this, we are running a package called Swindle, which extends
the basic Scheme language with an object-based type system.

See the course software page for instructions on how to set this up on
your own computers.  

--- These Lecture Notes

Lecture notes are there to help you; however, they are not intended to
take the place of the lectures.  They're my working notes, so they're
simple, terse, and plain text. I'll generally post them after the lecture.



Some points:

We want CS majors to take CS 230. 

   CS 230 has a general introduction to _mathematical computer
   science_, namely, the mathematical study of computational problems.

- Main prerequisite:  Willingness to work hard and think clearly.

  You don't need to be a programming wizard.  (In fact, that doesn't
  usually help, in this case)

  We will assume a certain degree of mathematical sophistication.

- Math: You should be able to do algebra; you should know what a
  derivative and an integral are.  However, we don't use calculus per se.

  Best preparation is High School geometry!

- We cover:

  1. How to reason clearly and precisely about computational problems.

  2. The mathematical basis of advanced programming techniques,
     including recursion, higher-order functions, and
     computability.

  3. Formal skills: Proving properties about your programs, and how to
     reason using a formal model of computation.

     Why?  Because most software is broken, and formal tools give you
     a good basis to avoid problems like these:

       Mars probe English/metric conversion problem.
       The whole Y2K issue -- old code never dies!
       Literally hundreds of exploitable software errors in commonly
         used e-mail and web tools.
      - Denver airport:  computers hurled baggage around
      - healthcare.gov bugs, of course
      - European Rocket Consortium (boom!)

Style of the course:

* Mind-bending:
  - Lots of new concepts, like treating functions as if they were data.
  - Implementing RSA, Finite automata...
  - Much of the learning is in the problem sets
  - Discrete mathematics of functional programming
        - the MapReduce model used widely for cloud computing, big data
        - used by Google, Facebook, Yahoo, etc. 

* Lots of work.  Be prepared to put in some time, BUT you
   really need to learn how to put in "quality time", and less of it
  - Things start out pretty quickly, but unlike most other classes, it
    doesn't get any *worse*. 

* We try to have fun.  For example, on many of the problem sets,
  we'll have options for adding new components to the projects
  (i.e., new features).

----------------------------------------------------------------------


This course introduces the Mathematics in COMPUTER SCIENCE.

Discrete Mathematics for COMPUTER SCIENCE.

* Consider "COMPUTER SCIENCE" as a term
  That's a terrible name, actually.  It's not about either one.
  - It's not really about computers per se;
    - They're our tools
    - You wouldn't call surgery ``Scalpel Science'' or math
     ``Arithmetic Science'' would you?

  - It's not a science
    - Not many disciplines with ``science'' in their name are sciences:
      - poultry science
        military science

  - It's more like some combination of
    - mathematics 
    - engineering
    - expressive art

This course emphasizes the first (mathematics), while making
connections to the second (engineering).

Names of disciplines are mostly misleading.

  * Geometry comes from ``Ghia Metra'', ``Geo Metry'', meaning 
    ``Earth measure''
  - In Egypt, the priesthood was charged with restoring boundaries of
    fields after the annual flood when all the boundary markers got
    swept away.
  - They invented geometry, more or less, to handle distances and
    angles and areas.  
  - They weren't quite right, but good enough to run Egypt for a long
    time.

  * Geometers are not still measuring the earth -- not mostly anyways
  * The main contribution was FORMALIZING NOTIONS OF SPACE.

Similarly,
  * We are using tools (computers, occasionally DNA and other gadgets)
    to do computation.
  * Our most lasting work is probably FORMALIZING NOTIONS OF
    COMPUTATION.  Understanding what it means to compute.


----------------------------------------------------------------------


The first part of CS 230 is about...

  [Show Drawing.]

   mathematical logic
   Proofs
     |
     |
    \ /
     .
   lambda calculus --> substitution model  
			   |
			   |
			  \ /
			   .
			  Scheme --> Halting problem
				 --> Induction
				 --> Iteration
				 --> Recursion
				       --> number theory and RSA
				       --> Graph theory and finite automata
				 --> mathematics of functional programming
				 --> order of growth
					--> Asymptotic complexity
				 --> MapReduce / Hadoop model of cloud
                                         computing / big data 

  Q. Why is this useful?

  A.  Discrete mathematics will help:
   
  * Building your skills in REASONING ABOUT COMPUTATIONAL PROCESSES.

  1. Writing programs: 
     - The goal is to learn
       The Mathematical Basis for our Bag of Tricks, e.g.,
	 - functional programming (MapReduce)
	 - higher-order functions

  2. Understanding programs
     - Correctness
     - Resources: how much space and time your programs take

  3. Better Problem Solving:
     - Faster
     - more Accurate

Single most important tip: a little bit of thinking is worth a lot of coding
(or: don't hack - think!)

----------------------------------------------------------------------


There are two classes of high-power programmers:
  * Wizards
  * Experts

Wizards do all kinds of amazing things,  
  * Squeeze programs into far too little space
  * Get them to run amazingly fast
  * Write huge programs overnight, that mostly work.

Experts do other kinds of amazing things:
  * Write huge programs over years, and keep them working right.
  * Write programs which other people can use, fix, adapt.
  * Work with other programmers (or be their boss)

Never program behind a wizard.  (You can't understand their code, or
fix it.)

You can be both:
  * Expert wizards are pretty rare, and *very* valuable.

We can't quite train you to be a wizard.
  * If you are one, you might show it this semester.

At Duke CS, we can, and will, train you to be an expert. That's what
discrete mathematics is used for.


----------------------------------------------------------------------


This course, and later courses (and what CSists do) are *not*
programming courses, mostly.

  * Programming is a basic tool
  * Mathematicians don't spend all their time solving calculus
    problems.
  * But they know calculus, and solve calculus problems when they
    run into them.


Computational Processes aren't quite mathematics, though:
  Comp. Proc: ALGORITHMIC (IMPERATIVE) knowledge.
    - *How* to do things
  Mathematics: DECLARATIVE knowledge
    - *What* is.

Our goal is to help you develop some computational rigor: precise
descriptions of how to compute something. This is the heart of
discrete mathematics for computer science.

----------------------------------------------------------------------


Declarative vs. Imperative:

DECLARATIVE:

  sqrt(x) is the unique y such that y*y = x and y >= 0.

This *defines* sqrt(x) -- at least for some x's -- 

  * With a bit of mathematics, you can prove that if there are any y's
    like that, there's only one.

  * So, we can tell that, e.g., sqrt(9)=3 from the definition.

But it doesn't tell you how to FIND sqrt(x), just check whether a
given y is sqrt(x).

Well, to compute sqrt(x) we could try all possible y's, compute y*y, 
and check if it's x.  But that would take a long time.

Observation: 
	if g > sqrt(x), then x/g < sqrt(x)
	if g < sqrt(x), then x/g > sqrt(x) 
        and when g = sqrt(x) !?!

Proof: g > sqrt(x)  ->  1/g < 1/sqrt(x)  ->  x/g < x/sqrt(x)

ALGORITHMIC or COMPUTATIONAL knowledge:

To find sqrt(x) -- or rather, a good enough approximation to it --

  1. Make a guess g, which should be nonnegative. 

  2. Improve the guess, by averaging g and x/g

  3. Stop when the guess is good enough.  How? When |g*g-x| is
     very small.

This is one of the first ALGORITHMS
  (= METHODS OF COMPUTATION)
  * Heron of Alexandria, about 100 AD

(Newton generalized it to cover almost everything, so it's called
Newton's Method)

It works quite well:

   * Take x = 2, 
   * guess g=1, why not?
   * x/g = 2, so g := 3/2 = 1.5
   * x/g = 4/3, so g := 17/12 = 1.4166666
   * x/g = 24/17, so g := 557/408 = 1.4142156
      which is off by 6e-6.

----------------------------------------------------------------------


VERY IMPORTANT POINT:


DECLARATIVE is a description of WHAT IT DOES

ALGORITHMIC is a description of HOW IT DOES IT

Need BOTH to have a good understanding.  You probably know from experience
that going from WHAT to HOW is not always easy (that is what being "a good
programmer" is about).  But its also not always easy to go from HOW to WHAT,
the HOW is very detailed and does not necessarily reveal the WHAT in a
straightforward manner.

Our goal is to teach you more about moving back and forth between the WHAT and
the HOW.


----------------------------------------------------------------------


A key mathematical idea of CS:
     
      ABSTRACTION:
        * Take a computational process
        * Give it a name
        * Give it a standard interface
          - That is, explain what its inputs and outputs are

        ** e.g., 
          define sqrt(x) to be the result of doing Newton's method.


    x	[------] sqrt(x)
 ------>[ SQRT ]--------->
	[------]

        ** Stereo connectors, USB, Bluetooth...
          - Zillions of different kinds of boxes.
          - They all have the same set of connections and cables, and
            you can hook 'em up freely.

            

----------------------------------------------------------------------


--- About Scheme and Racket

We need a _notation_ to tell the computer what to do.  Our choice is
the Scheme language, with some extensions provided by a package called
Swindle.

  - See today's handouts; also read through SICP.
  - We'll cover more in the next couple of lectures.

Then you'll know the whole thing.

`know' is half a lie.
  * I could teach you the rules of chess in a day.
  * You won't be a good chess player so fast!
  * After a semester you'll be an expert though.

First lie of many! (This course is successively lies, each a bit closer
to the truth)

Racket is an IDE for the programming language Scheme designed to teach
programming assignments that emphasize the discrete mathematics of
greatest importance to Computer Science (CS): we will use it to learn
mathematical induction, recursion, iteration, graph theory, logic, and
other vital topics.  Scheme is based a tour de force in mathematical
logic, called Alonzo Church's lambda-calculus. The lambda-calculus was
used to prove Church's Theorem, a stunning result in discrete
mathematics. Church's Theorem is what we now call his proof that the
Entscheidungsproblem, which asks for a decision procedure to determine
the truth of arbitrary logical propositions in a mathematical theory,
is undecidable for the theory of Peano arithmetic.

The preceding paragraph is designed to fascinate you. However, no
knowledge of any of the terms in that paragraph are required for this
course.

In this class, we will start with the basics, gracefully accelerating
until we use Scheme to rigorously prove the undecibability of the
Halting Problem. This will prove for you the single deepest result in
Computer Science. To do that, we will teach you the connection between
induction and recursion, the link between recursion and iteration, the
substitution model of functional programming semantics, structural
induction, sets, and logic. Racket/Scheme will be used for programming
assignments on recursion, number theory/RSA Cryptography, and graph
theory - some of the most important and interesting topics in discrete
mathematics for CS.

Racket/Scheme will also be used to cover all of the other topics
required in this discrete mathematics class.

See:
http://www.cs.duke.edu/~brd/Teaching/dm/racket/How_to_Download_Racket.html

----------------------------------------------------------------------


The Lambda Calculus

We will spend two lectures learning the lambda calculus. This will
directly connect mathematical induction (Lecture 3) to the precise
meaning ("semantics") of iterative and recursive computer programs. 

Why is this important?

 * The Lambda Calculus, the substitution model, and proofs by
    induction comprise the part of Discrete Mathematics that is the
    foundation of functional programming. This is called the
    "MapReduce model," which is used widely for cloud computing, big
    data, by Google, Facebook, Yahoo, etc. 

Using these tools, we will be able to use mathematical induction to
prove properties of computer programs rigorously. For example:
correctness, completeness, complexity.

Let us begin. A journey of 1000 miles begins with one step.

We will consider the Lambda Calculus (LC) as embodied in scheme, a
programming language which is a good operational model for LC, that
also let you write interesting programs.

Rules of Scheme: - Grammar (aka Syntax)

  * It's described as ``Prefix-order, fully parenthesized''

  1. The operation to perform comes *first* (prefix-order)

  2. Every part of the program has parentheses around it, 

This has two effects:
  1. The grammar is *very* simple
     - Never any question about what expressions mean
     - WHENEVER you write something, put the operator first.

  2. It's kind of alien at first.  It isn't "just like Pascal".
Mantra: "Scheme is not C++/Pascal/C/Java".

For example, 
  the Java 4+5*2    [AMBIGUOUS]
is 
  the Scheme (+ 4 (* 5 2))  [NOT]

Another, in   Java:

  if(TEST1) 
    if(TEST2) 
      return 1;
    else
      return 2;

  Does `else' go with the inner `if' or the outer `if'?  Again, you
  have to know the rule: It always goes with the innermost.  But
  that's extra information you have to carry around in your head!

In Scheme, the analogous code is never ambiguous.

Everything in Scheme is an EXPRESSION, which means that it has a value.
The value of (+ 4 (* 5 2)) is 14.  [REPEAT THIS MANTRA]


----------------------------------------------------------------------


An expression is either 
  * a PRIMITIVE
or
  * a COMBINATION 

PRIMITIVES are variables and  constants:
  sequence of characters not containing parentheses, spaces
    (There's a little more to it than that)
  1
  -31
  "a string"
  x
  a-long-variable-name  
   (dashes, not underscores -- underscores are gross and PASCAL-ish)
  +  
   (note the last one! the name of a function is a variable just like
    any other)

COMBINATION: is one or more expressions 
  * Enclosed in parentheses
  * Separated by spaces:

  (+ 3 5)
  (gcd (+ 51 8) 6)

The order of expressions in a combination is ALWAYS:

  (OPERATOR operand1 ... operandn)
    ^ thing to do 
             ^ things to do it to

Note that the definition of an EXPRESSION is recursive (it is a
PRIMITIVE or COMBINATION, the latter of which is one or more
EXPRESSIONs).  First of many...    

[Show of hands; comfortable thinking recursively]

----------------------------------------------------------------------


For *almost* all operators, the value of a combination is determined
by the following rule:

To evaluate a combination:

  E. Evaluate the subexpressions.  
     [[ THIS RULE IS RECURSIVE: ``to evaluate, evaluate''! ]]

  A. Do the specified operation (value of the first expression)
     to the operands (remaining expressions)

Example:

 (* (+ 3 4) 2)

E. Evaluate *.  It comes out as `multiply.'
E. Evaluate (+ 3 4)
  E. Evaluate +.  It's `add'
  E. Evaluate 3.  It's 3
  E. Evaluate 4.  It's 4
  A. Add 3 and 4.  It's 7
E. Evaluate 2.  It's 2
A. Multiply 7 by 2.  It's 14

Note that we're doing it inside-out.

----------------------------------------------------------------------


So far we have a fully-parenthesized 4-function calculator.
  * Big deal.  They're free in cereal boxes.

The same basic mechanism holds for all Scheme expressions
  * Except Special Forms  -- BUT there are not many of these in the language

----------------------------------------------------------------------

One of the most powerful abstraction techniques is to give things
names.  

  * sqrt(x), not ``the unique y such that...''

This sounds kind of trivial, but it's very hard to get the right parts
of a problem and give them the right names.  Much of system DESIGN is
thinking clearly about what the PARTS of something are, not just
hacking, and naming things descriptively can help.

The way to name a global variable in Scheme is using the special form 
define:

  (define data (+ 9 4))
 
data is now 13
 
  (define add-up  +)
 
add-up is now the same function that + is
  
   (define worf  (add-up data 2))
 
worf is now 15
 
In general

  (define NAME EXPR)

defines the NAME to have the value that results from evaluating EXPR.

The general evaluation rule given above wouldn't work for define:
  * We'd have to evaluate `data',
    but we're trying to define it.
    So that doesn't work.

Special forms have special rules.
  * define associates the VALUE of the third expression with the NAME 
    given in the `define' 
 
----------------------------------------------------------------------


MAIN POINTS:
  1. Studying computational processes in a language (Scheme)
     Two parts: DECLARATIVE ("what is" description)
                ALGORITHMIC ("how to" description", may be code)

  2. The language has simple, uniform evaluation rules
     (thing-to-do operand1 ... operandn), except for a few SPECIAL
     FORMS like DEFINE

  3. (1 and 2) are a form of the LAMBDA CALCULUS, a powerful technique
     from mathematical logic that is useful for reasoning about
     functional programs.

  4. One of the most important aspects of good program design is good
    abstraction, and a lot of that involves thinking clearly about
    complex things.  This course is about Mathematical techniques for
    doing that.

  
