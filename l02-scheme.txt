Topic: Logical Foundations of Functional Abstraction, and the Substitution Model 
Date: January 13, 2013
Handouts: scheme-tips.shtml, substitution-model.shtml
Examples: newton-cube-root.scm
Notes: define.txt, lambda.txt
Reading: SICP 1.1.5 to 1.1.7 (pg. 13-25)


Note: PS1 concentrates on *generalizing* existing code.
      Program by example
      NOTE: The Online version is the definitive
       version, corrections and clarification will be posted there.

- Short assignment 1 is available on the web:
  Concerning SA grading:  SA's are graded on a simple scale, 0, 1, or 2.
  They are intended to give you practise and focus.
  2 = fine, all is well
  1 = needs work
  0 = nothing of substance was turned in.
  
  If you receive a 1, you may re-work your solution and re-submit to
  get a 2, and if you do get a 2, that replaces your 1.

  You may only resubmit once, and it has to be received by the class
  after the SA in question was turned back (whether or not you were in
  class)

WWW: Read webpage everyday. 
     Read announcements when new. 
     New lectures, notes posted regularly. 

Today's topics:
  * Logic and the lambda calculus
  * Functional Abstraction
  * Substitution Model of Evaluation

We've seen (mainly in demos/recitation):
  * Simple uniform syntax:
    (operator operand1 ... operandn)
  * Simple evaluation rule:
    eval each subform, then apply operator's value to operands'
    values.
  * Two special forms: DEFINE and LAMBDA



So far we have handwaved a lot in understanding the evaluation process --
determining the value of Scheme expressions

    - Substitution Model -- formal means of understanding Scheme
      expressions (at least ones without assignment, which we wont
      use for quite a while).


----------------------------------------------------------------------

A procedure (or method)
  * Packages up a computation
  * Puts a black box around an operation

In some weird way, (* x x) is squaring.  Except that this
doesn't quite make sense.

Similarly averaging is (/ (+ x y) 2)

If you want to package squaring or averaging for later use, you need
to 
  * Tell which variables are involved
  * And what order they're in.

Squaring involves one variable, x.

To package it up in Scheme, we use the special form called LAMBDA (does not
follow the normal evaluation rule) 

  - LAMBDA makes a procedure -- BUT DOES NOT NAME IT!

You saw LAMBDA in demo/section.

  (lambda ((x <number>)) (* x x))
     |       |              |
     |       |              +--- BODY: an expr to eval once you've got x.
     |       |
     |       +--------- PARAMETER LIST: just one param, called x which is a <number>.
     |
     +--------------- lambda: the special form that means, make a
procedure


Or, read it as:

  * lambda       The procedure
  * ((x <number>)) Taking the number x as the single parameter
  * (* x x)        Returning the value of the expression (* x x)

NOTE: <number> is one of the pre-defined types in Scheme/Swindle.
Each name (parameter or variable) has a type.

  *** the lambda form by itself does NO COMPUTATION!
  *** It creates an OBJECT which CAN do the computation
  *** when used in first position in a combination.

  *** computation happens when it is APPLIED (applied means used in
    first position in a combination)

(/ 1 0) produces an error
(lambda () (/ 1 0)) is not an error (yet!)

what makes the second one of these produce an error??

((lambda () (/ 1 0)))  when it is applied (used)

NOTE: no NAMING as part of creating procedures, creating a procedure (using
LAMBDA) is completely separate from naming it (using DEFINE)


----------------------------------------------------------------------


[We also contrast the following --- use if there are questions]

(define foo 3)
(define bar (lambda () 3))

foo evaluates to 3
bar evaluates to however Scheme prints out a procedure object
(foo) generates an error, application of a non-procedure object, 3
(bar) evaluates to 3

If you understand these examples, then you are a long way towards
understanding evaluation of simple Scheme expressions.

----------------------------------------------------------------------


Everything in Scheme has a value; everything is an expression.
    [REPEAT THIS A FEW TIMES]
  1's Value is 1

lambda returns a PROCEDURE OBJECT as its value:
  * a method of doing some computation at a later time.
  * Putting it in a box 

  * procedures (created by LAMBDA) are first class objects
    - Anything you can do with all other values, you can do with
      procedures.
    - Give them as arguments 
    - Return them 
    - Store them in variables
    - Put them in data structures


By the evaluation rule, we know how to use a procedure object:
  * Put it in the first position of a combination, but this can be
    tedious, so we also use DEFINE to name objects

  ((lambda (x) (* x x)) 5) ==> 25

  (define square (lambda (x) (* x x)))
 
  (square 5)

  has the same meaning!  We will get more precise about this in a moment.

Now we can use square conveniently too.

  (square 5) ==> 25
  (square 3) ==> 9
  (+ (square 2) (square 3)) ==> 13

*** NOTE: We can now use square just as if it were a primitive operation,
    like + - * / etc.

----------------------------------------------------------------------


*** Clean the board here ***
*** And write small ***


Now, we have progressed to the point where we can try implementing
Heron of Alexandria's square root algorithm from last time:

(define heron-sqrt 
  (lambda ((x <number>))
; Try some guess for sqrt(x)
; we always pick 1.
   (try 1 x)))

(define try 
  (lambda ((guess <number>) (x <number>))
   ;; If it's good enough guess
   (if (good-enough? guess x) 
       ;; Then stop and return the old guess
       guess
       ;; Otherwise, try an improved guess.
       (try (improve guess x) x)
       )))

(define good-enough? 
  (lambda ((guess <number>) (x <number>))
    (< (abs (- (square guess) x)) 0.0001)))

(define improve 
  (lambda ((guess <number>) (x <number>))
    (average guess (/ x guess))))

(define average
  (lambda (a b)
    (/ (+ a b) 2.0)))

(define square 
  (lambda ((x <number>))
    (* x x)))


*** Leave the code on the board! ***

Note that try is a *recursive* definition, it calls itself.
  * We will see that it is actually *iterative*, because
     no state is built up on successive recursive calls
  * This use of recursion is more like loop, while, and do.

Paid commercial advertisement: There's a difference between recursive
DEFINITIONS (like try) and recursive *processes*.  That's for another
lecture though.


----------------------------------------------------------------------


We've snuck in a new beast:

   (if test consequent alternate)

is a *special* *form* and doesn't follow the usual evaluation rule (which is,
evaluate all the subexpressions, then apply the first value - the operator -
to the remaining values - the arguments).

IF's special rule is:
  1. Evaluate the test
  2. If the test is true, evaluate and return the consequent
  3. If the test is false,evaluate and return the alternate.

It *only* evaluates one arm. 
  * You wouldn't want to do both.
  
What's true?
  #t is true
  #f is false

In fact, almost anything is true:
  #f is the *only* false value

(if #t A B) evaluates to A

What is (if 0 10 20)?  10, of course!
(Pascal-itis can be cured)

MORE ON THIS AND RELATED FORMS IN RECITATION.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

This is *all* we need to write that sqrt procedure!
  * No assignment := 
  * No while loops


----------------------------------------------------------------


From this you can sort of see the processing in sqrt:

*** Go through this out loud, quickly ***

(sqrt 2)
                         calls
(try 1 2)
                         calls
(good-enough? 1 2) which returns false,
so do 
(try (improve 1 2) 2)
and (improve 1 2)
                         calls
(average 1 2)
which returns  3/2,
so we call (try 3/2 2) as the new guess.

This is all a little fuzzy; we can be considerably more precise about (and get
a better understanding of) exactly what Scheme expressions do.

A *model* of the *evaluation* *process*:

  evaluation - reducing an expression to a value


----------------------------------------------------------------------

Using the lambda calculus.

We use Substitution Model covered in the handout (today).

It is a MODEL:
  - A tool to help us understand the values that our procedures
    are computing   (NOT WHAT THE COMPUTER DOES!)
  - It helps us reason about programs.

There are two basic rules of the model:

1. To *evaluate* a combination (other than a special form), *evaluate*
   the subexpressions of the combination, then *apply* the procedure
   object that is the value of the leftmost subexpression to the
   remaining values.

2. To *apply* a compound procedure to a set of arguments, *evaluate*
   the body of the procedure with each argument SUBSTITUTED for the
   corresponding parameter.

Notation:
  (...) means *evaluation*, Rule 1

  [...] means *application*, Rule 2.


We'll draw a box around any object that has already been evaluated, 
  to distinguish them from symbols that must be evaluated:

*** Use braces here to denote boxes ***

   5 is a symbol
  {5} is some computer representation of the number 5.

   * is a symbol
  {mult} is its value, the multiplication function.

The symbol and the computer representation are DISTINCT entities.

Procedure objects need notation:
  {proc (params) body} 
  is the value of (lambda (params) body)

NOTE: proc is not part of Scheme (any more than mult is).

  (lambda ((x <number>)) (+ x 5))  evaluates to  {proc ((<number> x)) (+ x 5)}


----------------------------------------------------------------------


Let's now evaluate (square 5) where square is defined as above.
  * square evaluates to {proc  ((<number> x)) (* x x)} because
    that's the value we defined square to have with define -- by
    a special form rule we'll see later.
  * 5 evaluates to {5}
Now rule 1 says, apply {proc ((<number> x)) (* x x)} to {5}:

  [{proc ((<number> x)) (* x x)} {5}] 

by rule 2, this gives us the body of the proc --- (* x x) --- with x
replaced by {5}:
  (* {5} {5})

`*' evaluates to {mult}

  [{mult} {5} {5}]

We're now beyond the substition model's rules, because {mult} and {5} are
primitives.  All that the substitution model does is tell us how to reduce
expressions to values, these are all values.

Each (primitive) operation in some sense has its own special-case
rules, in this case mult simply performs multiplcation, resulting in

  {25}


----------------------------------------------------------------------


Here's a more complicated example:

1. (sqrt 2)

2. [ {proc ((<number> x)) (try 1 x)}  {2} ]

3. (try 1 {2})

4. [ {proc ((<number> guess) (<number> x)) ...} {1} {2} ]

*** If is a special form, so we handle it specially (has its own rule
in the model):

5. (if (good-enough? {1} {2})
       {1}
       (try 
        (improve {1} {2})
        {2})
       )

By the rule for if, we first evaluate the test:

[ {proc ((<number> guess) (<number> x)) ...} {1} {2} ]
(< (abs (- (square {1})) {2})  0.01)
...
#f

Now by the special rule for IF we evaluate the alternative
because the test was false:

6. (try (improve {1} {2}) {2})

We have to evaluate this "inside out" because in order to evaluate
all the subexpressions we need a value for the second subexpression which is
itself a combination.   We get this value by

[ {proc ((<number> guess) (<number> x)) ...} {1} {2} ]
(average {1} (/ {1} {2}))
[{proc (a b) (/ (+ a b) 2)} {1} {2}]
(/ (+ {1} {2}) 2)
...
{1.5}

Now we have evaluated each subexpression of (try (improve {1} {2}) {2})
resulting in

[ {proc ((<number> guess) (<number> x)) ...} {1.5} {2}]

Substituting the body of the procedure with values {1.5} and {2}
We're back at something that looks like step 4.
The pattern repeats.

7. (if (good-enough? {1.5} {2}) 
       {1.5}       	
       (try
         (improve {1.5}{2}) 
         {2})
     
The test is #f so by reasoning analogous to above, 
(try (improve {1.5}{2}) {2}) evaluates to {1.416667}

8. [ {proc ((<number> guess) (<number> x)) ...} {1.416667} {2} ]

9. (if (good-enough? {1.416667} {2})
       {1.416667}
       (try (improve {1.416667} {2})))
   
The test of the if evaluates to #t in this case so
the value is thus {1.416667}


With the Substitution Model, we have a very precise model for
determining the value of expressions....


   AT LEAST, FOR NOW.  It breaks when we add assignment, but that
     won't happen for quite a while.  We'll write some complicated
     programs without it.  That's part of the lesson: you don't need
     to depend on assignment as much as you do.  Kick the habit.


----------------------------------------------------------------------



Important points in today's lecture:

  * Recapped the evaluation rule, DEFINE and LAMBDA

  * Introduced the special form IF -- 
       simple if-then-else conditional

  * PROCEDURAL ABSTRACTION: - Put a computational process in a box
       LAMBDA builds the box
    Naming is a separate issue, can associate a name using DEFINE

  * Substitution Model
    - Precise model for evaluating expressions
      = Two basic rules:
        = To Evaluate a combination, 
             evaluate subexpressions 
             apply procedure to arguments
        = To apply a compound procedure
             Substitute arguments in body
             Evaluate body. 

   * The Substitution Model is an operational embodiment of the lambda
     calculus, which is used to model computational processes.

   * And now you `know' the lambda calculus, one of the most important
     triumphs in mathematical logic, which is an important branch of
     discrete mathematics. It is also one of the parts of discrete
     mathematics that is most closely linked to the meaning
     ("semantics") of computer programs.

    `know' is half a lie.
      * I could teach you the rules of chess in a day.
      * You won't be a good chess player so fast!
      * After a semester you'll be an expert though.

    First lie of many! (This course is successively lies, each a bit closer
    to the truth)
