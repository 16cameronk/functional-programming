Topic: Programming in Scheme
Date: Jan 10, 2013
Handouts: scheme-tips.shtml
Examples: scheme.scm

 Hold this recitation section with a laptop and projector hooked up,
and they have their laptopd, so that the students can get oriented
with Racket.  Make sure everybody has their Racket IDE set up!

Topics to cover:

0. Downloading and running DrScheme.

   Sketch out the basics of the two-pane editor; discuss syntax
   highlighting, automatic indentation, the "Check Syntax" button,
   parenthesis balancing, etc.

   Go over how to load and save files.

1. Review of Scheme syntax:
   - Fully parenthesized, prefix notation:
     (+ 5 (* 8 x))

   - Extremely simplified s-expression grammar in BNF:
     expr := prim | '(' list ')'

     list := <empty> | expr list

     prim := [number] | [string] | [ident] 

2. (default) Evaluation rules:

   For primitives:
   PRIMITIVES other than identifiers evaluate to themselves.
   IDENTIFIERS evaluate to the value of the variable named.
   
   For combinations:
   EVALUATE all subexpressions; APPLY first value to the rest.

3. Special forms:

   A special form is a Scheme combination that has a special
   evaluation rule, different from the default rule.  The most
   important ones:


(define NAME EXPR)
Rule:
 1. Evaluate EXPR
 2. Associate (bind) NAME to the value of that expression.

Example:
 (define pi (* 4 (atan 1.0))) ;; atan is built-in: "arc tangent"

 Evaluate: pi

(lambda (PARAMS) BODY)
Rule:
 1. Create a new procedure which takes parameters PARAMS 
    (a list of identifiers) and whose body is the given BODY expression.

Example:
 (lambda ((x <integer>)) (* x 2))
 ==> #<method:-anonymous->  ;; this is how Swindle prints the value

 v----------- combination ----------v
 ((lambda ((x <integer>)) (* x 2)) 5)
  ^------ lambda expression -----^ ^- primitive
 ==> 10

Notes:
 - Parameters are either identifiers, or lists of 
   (IDENT TYPE), e.g. (x <integer>), (s <string>), etc.

 - Using the type is preferred!  If no type is given, <obj> is
   assumed, meaning any object.

 - Resulting value from lambda is an object called a PROCEDURE.
   Usually denoted {proc (PARAMS) BODY} on the board.

Another example:
 (lambda ((x <number>) (y <number>))
   (+ x (* y 2)))

 PARAMS:  (x <number>) (y <number>)
 BODY:    (+ x (* y 2))


(if TEST CONSEQ ALT)
Rule:
 1. Evaluate TEST
 2. If the result is true (i.e., any value besides #f), evaluate
    CONSEQ and return its value.
 3. Otherwise, evaluate ALT and return its value.

Notes:
 - TEST is always evaluted, but only one of CONSEQ or ALT is evaluated.

 - Each of CONSEQ and ALT is a single expression (if you want more than
   one, use 'begin', which is described below).


4. Combining Special Forms

Of course, you can combine special forms to do useful things.

Exercises for the class:

 - Define 'square' to be a procedure that takes any number and returns
   the square of it.

 Solution:
   (define square
     (lambda ((n <number>))
       (* n n)))

 - Define 'foo' to be a procedure that takes a string, and appends the
   string "wibble" to the end of it.

   The built-in procedure string-append will help:
     (string-append a b) ==> [a concatenated with b]

 Solution:
   (define foo
     (lambda ((s <string>))
       (string-append s "wibble")))

 - Define safe-div to take two numbers a and b, and return a / b,
   unless b = 0, in which case #f should be returned.

 Solution:
   (define safe-div
     (lambda ((a <number>) (b <number>))
       (if (zero? b)  ;; zero? is built in; (= b 0) also works
           #f
           (/ a b))))


5. Other useful items:

Procedures:
 (display OBJ)     -- print a representation of any object
 (newline)         -- print a newline character
 (error "message") -- print an error message and stop evaluating
 (zero? n)         -- works on numbers; true if n = 0, false otherwise
 (not expr)        -- (not #f) ==> #t, otherwise (not expr) ==> #t
 (modulo a b)      -- return remainder upon dividing a / b (a = bq + r
                      with 0 <= r < b, as per the division theorem).

Special forms:

(begin E1 E2 ... En)
Rule:
 1. Evalute E1, E2, ..., En in order from left to right.
    Return the value of En.

(cond (TEST1 SEQ1 ...) ... (TESTn SEQn ...) (else SEQ))
Rule:
 1. Evaluate each TEST in order. 

 2. If a TEST is true, evaluate the sequence of expressions in order,
    and return the value of the last (like begin).

 3. Otherwise, if no tests are true, and else is present, evaluate
    that sequence in order.

 4. If no tests are true, and else is absent, an arbitrary value is
    returned.

This is a generalization of the 'if' form:
 (cond (TEST1 SEQ1 ...) (TEST2 SEQ1 ...) (else SEQ ...))
is equivalent in meaning to:
 (if TEST1
     (begin SEQ1 ...)
     (if TEST2
         (begin SEQ2 ...)
	 (begin SEQ ...))) ;; this is the else clause

It's neater, and saves you some typing.  Use it.

(and E1 E2 ... En)
Rule:
 1. Evaluate E1 ... En in order from left to right.
 2. If the value of any Ek is #f, return #f without evaluating the rest
    of the expressions.
 3. Otherwise, return the value of the last expression.

(or E1 E2 ... En)
Rule:
 1. Evaluate E1 in order from left to right.
 2. As soon as an expression is found whose value is not #f, that 
    value is returned without evaluating any further expressions.
 3. If all return #f, #f is returned.


Exercises for the student:
 - Define divisible? to take two integers, and return #t iff the first
   is evenly divisible by the second.

   Solution:
   (define divisible?
     (lambda ((a <integer>) (b <integer>))
       (zero? (modulo a b))))

 - Define leap-year? to take an integer year and return #t if it is a
   leap year, #f otherwise. 

   Rules for leap years:
   1. if n is divisible by 4, it is a leap year, except that:
   2. if n is divisible by 100 it is not, except that:
   3. if n is divisible by 400 it is.

   So: (leap-year? 1971) ==> #f   ; by default rule (1)
       (leap-year? 1976) ==> #t   ; by rules (1-2)
       (leap-year? 1900) ==> #f   ; by rules (1-3)
       (leap-year? 2000) ==> #t   ; by rules (1-3)

   Solution:
   (define leap-year?
     (lambda ((year <integer>))
       (if (divisible? year 4)
           (if (divisible? year 100)
               (if (divisible? year 400)
                   #t
                   #f)
               #t)
           #f)))

   Alternate solution (better, probably):

   (define leap-year?
     (lambda ((year <integer>))
       (and (divisible? year 4)
	    (or (not (divisible? year 100))
		(divisible? year 400)))))



;; Here there be dragons
