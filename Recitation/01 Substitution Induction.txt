Topic: Substitution Model, Induction
Date: Jan 18, 2013
Examples: newton-cube-root2.scm, times.scm, tailrec.scm
Handouts: induction

--- INDUCTION

The important steps are:

 1. Stating the property to be proven, and the induction variable

    Ex.  "For all n >= 0, 0 + 1 + ... + n = n(n + 1) / 2;
	  proof by induction on n."

    Ex.
    A more relevant example (because there are multiple options):
	 "For all a, and for all integers b >= 0, 
	  (multiply-1 a b) ==> {a * b}.
	  Proof by induction on b."

 2. Proving the inductive step:
    Assuming the property holds for all "smaller" values of the
    induction variable (the "inductive hypothesis"), show that the
    property holds for the current value.

    In other words, what you're proving is not P(n), but
    { P(0), ..., P(n-1) } --> P(n)

    This implication, plus the proof for P(0), gives us confidence
    that P(n) is true for any n.

    The important parts are:
    a. Stating the induction hypothesis (always use STRONG induction)

     Ex.  "Assume 1 + 2 + ... + k = k(k + 1) / 2, for all 0 < k < n."

     Ex.  "Assume (multiply-1 a k) ==> {a * k} for all k < b."

    b. Proving the inductive step (or steps!)

 3. Proving the base cases

    Ex. 
      (multiply-1 a 0) ==>
      [ {proc (a b) (if (zero? b) ...)} {a} {0} ] ==>
      (if (zero? {0}) 0 ( ... )) ==>
        [ {zero?} {0} ] ==> #t 
      0 ==>
      {0}, so, this case works by the substitution model

The above order is recommended for writing your own proofs.

The following examples are worth having the class work through with
less and less help.


--- Example 1:  Simple properties of N

Let's use induction to prove the following property of natural
numbers:

  P(n):  The sum of the integers 0 + 1 + 2 + ... + n is equal
	 to n(n+1)/2, for any n >= 0

  Proof by induction on n.  [state induction variable]

1. Inductive step

   Assume for all k < n, that P(k) is true, namely, that
   1 + 2 + ... + k = k(k + 1) / 2     [inductive hypothesis]

   Notice that:

   1 + 2 + ... + n =
   (1 + 2 + ... + (n - 1)) + n

   By the inductive hypothesis, since (n - 1) < n,

   1 + 2 + ... + (n - 1) = 
       (n - 1)((n - 1) + 1)
       -------------------- = n(n - 1) / 2
                2

   Then, 1 + ... + n = n(n - 1) / 2   +   n

   Doing a little algebra:

   n(n - 1) + 2n    n^2 - n + 2n    n^2 + n   n(n + 1)
   --------   -- =  ------------ =  ------- = --------
      2       2          2             2         2

   ... and that is what we wanted to prove!  

2. Base case

   The inductive case doesn't work to prove P(0), because there are no
   values less than that.  

       0(0 + 1)    0
   0 = -------- = --- = 0
          2        2

   So, it works here too.  That concludes the proof.


--- Example 2:  Multiple Base Cases

The Fibonacci series is defined as follows:

    F(0) = 0
    F(1) = 1
    For k > 1, F(k) = F(k - 1) + F(k - 2)

The first several elements of the series are:

    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Prove the following property of the Fibonacci numbers:

   P(x):  F(x) < 2^x

   That is, prove that for any x, the xth Fibonacci number is less
   than 2^x.  (You could add the additional constraint that x >= 0,
   but since F(x) is only defined for x >= 0, that is not strictly
   necessary).

Proof by induction on x:

1. Inductive step
   Suppose for all k < x, F(k) < 2^k (Induction Hypothesis).

   Since x - 1 and x - 2 are less than x, by the IH:

   F(x - 1) < 2^(x - 1)
   F(x - 2) < 2^(x - 2)

   Since all these values are positive:
	 F(x) = F(x - 1) + F(x - 2) < 2^(x - 1) + 2^(x - 2)

   Since 2^(x - 2) < 2^(x - 1):
	 2^(x - 1) + 2^(x - 2) < 2 * 2^(x - 1)

   Since 2 * 2^(x - 1) = 2^x, therefore:
	 F(x) < 2^x.

2. Base case
   F(0) = 0 < 2^0 (= 1)
   F(1) = 1 < 2^1 (= 2)


--- Example 3:  A Recursive Function

For a natural number n, the factorial of n (written `n!') is defined
as:

  1 * 2 * ... * n

By convention 0! is defined to be 1.

Consider the following definition of the factorial function:

  (define factorial
    (lambda ((z <integer>))
      (if (zero? z)
	  1
	  (* z (factorial (- z 1))))))

Using the substitution model and induction, prove that
      P(z):  (factorial z) ==> {z!}

Proof by induction on z.

1. Inductive step

   Given z > 0, suppose for all k < z that (factorial k) ==> {k!}

   Observe that z! = 1 * 2 * ... * (z-1) * z, by definition.
   Similarly, (z-1)! = 1 * 2 * ... * (z-1)

   So, we can say that:  z! = (z-1)! * z

   Since z > 0, evaluating (factorial z) produces:

   (factorial z) ==>
   (if (zero? z) 1 (* z (factorial (- z 1)))) ==>
     (zero? z) ==> #f, so evaluate ALTERNATE
   (* z (factorial (- z 1))) ==>
   (* z (factorial {z-1}))    [x]

   Since (z-1) < z, it follows from the induction hypothesis that
	 (factorial {z-1}) ==> {(z-1)!}
   and so we can replace [x] by:

	 (* z {(z-1)!}) ==> 
	 [{mult} {z} {(z-1)!}] ==> 
	 {z!}

   So, we have this case.

2. Base case

   The inductive case handles all z > 0.  But when z = 0,
   (factorial 0) ==>
   (if (zero? 0) 1 ...) ==>
     (zero? 0) ==> #t, so evaluate CONSEQUENT
   ==> {1}

   So, we have the proof.

--- TAIL RECURSION

In class, we discussed the basic nature of a tail-recursive function:
If the last thing a function does is to call itself recursively, then
there are no DEFERRED OPERATIONS.  We defined two functions to perform
a simplified kind of multiplication by repeated addition:

 multiply-1   non-tail-recursive
 multiply-2   tail-recursive

In `times.scm', there are two examples of how to do this; one using a
global helper function, and the other (preferred) using letrec to
define a local procedure.  Here are some other examples to show:

--- Tail recursion 1

Here is a non-tail-recursive function to compute the factorial:

  (define factorial-1
    (lambda ((z <integer>))
      (if (zero? z)
          1
          (* z (factorial (- z 1))))))

To write a tail-recursive version, we can do the multiplications as we
go along.  This is VERY similar to the multiplication example:

  (define factorial-2
    (lambda ((z <integer>))
      (letrec ((loop (lambda ((z <integer>) (result <integer>))
                       (if (zero? z)
                           result
                           (loop (- z 1) (* result z))))))
        (loop n 1))))

This pattern is so common, that Scheme actually has a special form to
make it easier.  It's called "NAMED LET", and it works like this:

  (let NAME ((V1 EXPR1) (V2 EXPR2) ... (VN EXPRn))
    BODY)

This is equivalent to:

  (letrec ((NAME (lambda (V1 V2 ... VN)
                   BODY)))
    (NAME EXPR1 EXPR2 ... EXPRn))

In other words, it binds NAME as a recursive procedure that can be
called to "start over" with new values.  Using this, we could rewrite
factorial again as:

  (define factorial-3
    (lambda ((z <integer>))
      (let loop ((n z) (result 1))
        (if (zero? n)
            result
            (loop (- n 1) (* result n))))))

--- Tail recursion 2

Here is a more complex example.  This is significantly more involved
than the previous one, but the same principles apply.  If time
permits, work through this one carefully.  The tail-recursive version
illustrates the usual concept -- using extra parameters to carry along
state information.  But it also illustrates another useful technique,
building up a recursion from the bottom instead of breaking it down
from the top.

Here is a simple recursive function to compute the nth Fibonacci
number:

  (define fib-1
    (lambda ((n <integer>))
      (if (< n 2)
          n
          (+ (fib-1 (- n 1))
             (fib-1 (- n 2))))))

Not only does this function have deferred operations, but it is doubly
recursive.  But we can get rid of the deferred operations by keeping
track of the last two values computed, and counting down until we have
computed the nth value.  Here's an example in tabular form:

(fib-2 6)
         n       prev   last
         6       0      1
         5       1      1
         4       1      2
         3       2      3
         2       3      5
         1       5      8
         0       8      13
                ^^^--------- this is the value returned

In each case:
 - The next value of n is n - 1,
 - The next value of last is the sum of (prev + last)
 - The next value of prev is the current value of last

  (define fib-2
    (lambda ((n <integer>))
      (letrec ((loop (lambda ((prev <integer>)
                              (last <integer>)
                              (n <integer>))
                 (if (zero? n)
                     prev
                     (loop last (+ last prev) (- n 1))))))
        (loop 0 1 n))))

