bplist00—_WebMainResource’	
_WebResourceTextEncodingName_WebResourceFrameName^WebResourceURL_WebResourceData_WebResourceMIMETypeUUTF-8P_Hhttp://www.cs.duke.edu/brd/Teaching/dm/handouts/substitution-model.shtmlOnF<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"><html><head>
  <title>The Substitution Model</title>
  <link rel="stylesheet" type="text/css" href="../cs18.css">
  <link rel="shortcut icon" href="../img/yinyang.ico">
</head>
<body>

<table class="title" align="center">
<tbody><tr>
  <td align="center">
    CS 230
  </td>
</tr>
</tbody></table>

<h1>The Substitution Model</h1>

<p>The <span class="def">substitution model</span> is a conceptual
framework we can use to determine the value or "meaning" of a Scheme
expression.  It gives us a set of simple algebraic rules we can use to
deduce what the result of evaluating an expression should be.</p>

<p>The substitution model is not intended to directly simulate the
details of how the computer actually evaluates Scheme expressions --
there are many details of evaluation which the computer must keep
track of, which are not important to our understanding of the process.
So, the substitution model is an <em>abstract</em> model of how
evaluation works.  It is intended to give us a method of reasoning
logically about programs.</p>

<ul>
  <li><a href="#values">Representation of Values</a>
  <ul>
    <li><a href="#primitive_data">Primitive data values</a>
    </li><li><a href="#primitive_op">Primitive procedures</a>
    </li><li><a href="#compound_proc">Compound procedures</a>
  </li></ul>
  </li><li><a href="#eval_rules">Rules of Evaluation</a>
  <ul>
    <li><a href="#eval_comb">EVAL (combination)</a>
    </li><li><a href="#apply_comb">APPLY (compound procedure)</a>
    </li><li><a href="#eval_prim_data">EVAL (primitive data)</a>
    </li><li><a href="#eval_prim_id">EVAL (identifier)</a>
    </li><li><a href="#eval_prim_op">EVAL (primitive operator)</a>
    </li><li><a href="#apply_prim_op">APPLY (primitive operator)</a>
    </li><li><a href="#eval_prim_val">EVAL (value)</a>
  </li></ul>
  </li><li><a href="#special_forms">Special Forms</a>
  <ul>
    <li><a href="#sf_define"><tt>define</tt></a>
    </li><li><a href="#sf_cond"><tt>if</tt></a>
  </li></ul>
  </li><li><a href="#example1">A simple example</a>
  </li><li><a href="#example2">A more complex example</a>
  </li><li><a href="#example3">An example with higher-order procedures</a>
</li></ul>

<hr>

<h2><a name="values"></a>Representation of Values</h2>

<p>Most expressions are too complex to be evaluated all at once.
Therefore, we generally break down the evaluation process into a
series of discrete steps, which transform complex expressions into
simpler expressions having equivalent meaning.  The process of <span class="def">evaluating</span> an expression means to repeatedly apply
these simplifying rules, until you obtain an expression which cannot
be simplified any further.  This resulting expression is said to be
the <span class="def">value</span> of the original expression.</p>

<p>Before we can model the process of evaluating a Scheme expression,
we need to develop some notation that will allow us to differentiate
between parts of an expression which have already been evaluated, and
those which are remaining to be considered.  For the purposes of this
handout, we will denote <em>values</em>, which are finished being
evaluated, in the following style:</p>

<p style="text-align: center">
  <span class="val">value</span>
</p>

<p>This notation lets us distinguish values, upon which no further
reduction is necessary, from other objects, which require additional
work.</p>

<h3><a name="primitive_data"></a>Primitive Data</h3>

<p><span class="def">Primitive values</span> include objects such as
numbers and strings.  The value of numeric expressions such as</p>

<pre><code>
  4
  -3.1
  2.71828
  3+4i
  5/16
</code></pre>

<p>are the numbers that they name.  For instance, we will denote the
value of the expression <tt>5</tt> as <span class="val">5</span>.
That is not what the computer prints out when you evaluate the Scheme
expression <tt>5</tt> -- we are simply using this notation to indicate
that the expression <tt>5</tt> has been evaluated, and does not need
to be reduced further.</p>

<p>The value of a string expression such as <tt>"alpha"</tt> is the
sequence of characters specified between the quotation marks.  As with
numbers, strings cannot be reduced any further, and so they are also
considered primitive values.  Other primitive values in Scheme include
vectors and pairs.</p>

<h3><a name="primitive_op"></a>Primitive Procedures</h3>

<p>The Scheme environment provides a set of <span class="def">
primitive procedures</span>, sometimes called <span class="def">
operators</span>, that form the building blocks of more complex
expressions.  This category includes basic operations like addition,
multiplication, string concatenation, and comparison of values.  In a
Scheme program, we generally access primitive procedures by writing an
identifier that is associated with the primitive procedure, such as
<tt>+</tt> for addition, <tt>*</tt> for multiplication, and <tt>=</tt>
for comparison.</p>

<p>The <em>value</em> of a primitive procedure is the sequence of
instructions that actually performs the operation.  Rather than
writing this out longhand, we will simply write a brief textual
description of the procedure, <i>e.g.,</i></p>

<ul>
  <li>The value of the addition operator is written
    <span class="val">add</span>
  </li><li>The value of the multiplication operator is written
    <span class="val">mult</span>
  </li><li>The value of the equality-testing operator is written
    <span class="val">equals</span>
  </li><li><i>et cetera</i>
</li></ul>

<p>When we write <span class="val">mult</span>, for example, you
should take this as shorthand for "the code to multiply a sequence of
values."</p>

<h3><a name="compound_proc"></a>Compound Procedures</h3>

<p>Compound procedures are created by evaluating a <tt>lambda</tt>
expression, which takes a list of parameters and a sequence of body
expressions, and creates a procedure object.  We will use the symbol
<tt>PROC</tt> to indicate compound procedures which are created in
this way, and will (usually) include the arguments and body of the
procedure.  For example, the value obtained by evaluating the
expression</p>

<pre><code>
  (lambda (x y) (+ x y))
</code></pre>

<p>is represented by:</p>

<p style="text-align: center">
  <span class="val">PROC (x y) (+ x y)</span>
</p>

<p>Similarly,</p>

<pre><code>
  (lambda ((x &lt;number&gt;)) (* x x))
</code></pre>

<p>is represented by:</p>

<p style="text-align: center">
  <span class="val">PROC ((x &lt;number&gt;)) (* x x)</span>
</p>

<p>We will sometimes omit the body and simply write an ellipsis
(<tt>...</tt>), if it is clear which compound procedure object we are
referring to from context.</p>

<hr>

<h2><a name="eval_rules"></a>Rules of Evaluation</h2>

<p>Primitive expressions, such as numbers, strings, operators,
<i>etc.</i>, evaluate directly to their associated values.  The
interesting question, therefore, is how to evaluate identifiers and
compound expressions.</p>

<p>A <span class="def">compound expression</span> is a list consisting
of one or more expressions.  An <span class="def">expression</span> is
either:

</p><ol>
  <li>A primitive expression, or,
  </li><li>A compound expression.
</li></ol>

<p>For example, <tt>6</tt> is a primitive expression (by part 1 of the
definition), while the following is a compound expression:</p>

<pre><code>
  (+ 5 (* 3 2))
</code></pre>

<p>...by part 2 of the definition.  The individual expressions in the
list are called <span class="def">subexpressions</span>.  In the
latter example, the subexpressions are</p>

<pre><code>
  +        <span class="comment">;; an identifier</span>
  5        <span class="comment">;; a number</span>
  (* 3 2)  <span class="comment">;; a compound expression</span>
</code></pre>

<p>Notice that the <tt>(* 3 2)</tt> is itself a compound expression,
with subexpressions <tt>*, 3,</tt> and <tt>2</tt>.</p>

<p>A compound expression is evaluated by recursively applying two
basic reduction rules (described below).  The resulting value can then
be <span class="def">substituted</span> for the original expression
(which is where the substitution model gets its name).</p>

<p>The two basic rules are:</p>

<h3 style="text-align: left"><a name="eval_comb"></a>EVAL</h3>

<blockquote><p>To evaluate a compound expression (other than a special
form), <strong>evaluate</strong> each of its subexpressions, then
<strong>apply</strong> the procedure that is the value of the
left-most subexpression to the values resulting from the remaining
subexpressions.</p></blockquote>

<h3 style="text-align: left"><a name="apply_comb"></a>APPLY</h3>

<blockquote><p>To apply a compound procedure to a set of arguments,
<strong>evaluate</strong> the body of the procedure, with each formal
parameter replaced by the corresponding argument value.</p></blockquote>

<p>Notice that EVAL and APPLY are <span class="def">mutually
recursive</span> (that is, EVAL uses APPLY, and APPLY uses EVAL).  As
a result, the process alternates between <strong>evaluation</strong>
and <strong>application</strong>, which continue recursively until the
entire expression has been reduced to primitive objects of one variety
or another.</p>

<p>The rules for primitive expressions are:</p>

<dl class="def">
<dt><a name="eval_prim_data"></a>
    EVAL (primitive data)</dt>

<dd>
  <p>The value of a primitive expression, such as a number or a
  string, is the value that it names.  For instance, the value of
  <tt>3.142</tt> is <span class="val">3.142</span>.</p>

</dd><dt><a name="eval_prim_id"></a>
    EVAL (identifier)</dt>

<dd>
  <p>The value of an identifier is the object that is associated with
  that name.  The Scheme evaluator maintains a table which maps (or
  <span class="def">binds</span>) names to values, and the value for
  an identifier is obtained by looking up the identifier in the table.
  It is an error if there is no entry in the table for the
  identifier.</p>

  <p>There are various ways to associate values with names in Scheme,
  the most basic of which is the <tt>define</tt> special form.  The
  Scheme evaluator provides several default name bindings, for the
  built-in primitive operations.</p>

</dd><dt><a name="eval_prim_op"></a>
    EVAL (primitive operator)</dt>

<dd>
  <p>The value of a built-in primitive operator is a sequence of
  machine instructions to carry out the specified operation.  We
  denote this, as described above, by writing a descriptive name for
  the operation, such as <span class="val">add</span> for
  addition.</p>

</dd><dt><a name="apply_prim_op"></a>
    APPLY (primitive operator)</dt>

<dd>
  <p>To apply a built-in procedure to its evaluated arguments, the
  Scheme evaluator runs the code for the procedure on those arguments.
  In the substitution model, we will simply supply the resulting value
  directly.</p>

</dd><dt><a name="eval_prim_val"></a>
    EVAL (value)</dt>

<dd>
  <p>Any primitive value evaluates to itself.  So, if we are called
  upon to evaluate some <span class="val">value</span> that resulted
  from some other evaluation, we will obtain the same <span class="val">value</span>.</p>
</dd></dl>

<p>Notice that apart from the built-in operators, the primitive types
have no <strong>apply</strong> rules.  It is an error to attempt to
apply a value other than a procedure.</p>

<p>When we model the evaluation of an expression using these rules, we
will use two different notations.  Expressions which are being
<strong>evaluated</strong> (using the EVAL rules) will be denoted with
(parentheses).  An expression which denotes the <strong>
application</strong> of a procedure will be denoted with [square
brackets].</p>

<hr>

<h3><a name="example1"></a>A Simple Example</h3>

<p>Consider the evaluation of the following expression:</p>

<pre><code>
 ((lambda ((x &lt;number&gt;)) (* x x)) 5)
</code></pre>

<p>Simple inspection shows that this should result in squaring the
number 5.  Let's walk through the evaluation a step at a time,
according to the rules, however.  Note that the step numbers are
simply for reference, and are not part of the substitution model.</p>

<table class="submodel">
<tbody><tr>
  <th class="top">Step</th>
  <th>Expression</th>
  <th>Rule</th>
</tr>
<tr>
  <th>1.</th>
  <td class="code">(<span class="enext">(lambda ((x &lt;number&gt;)) (* x x))
  </span> 5)</td>

  <td>Evaluate <tt>lambda</tt> subexpression</td>
</tr>

<tr>
  <th>2.</th>
  <td class="code">(<span class="val">PROC ((x &lt;number&gt;)) (* x x)</span> 
      <span class="enext">5</span>)</td>

  <td>Evaluate <tt>5</tt></td>
</tr>

<tr>
  <th>3.</th>
  <td class="code">[<span class="val">PROC ((x &lt;number&gt;)) (* x x)</span> 
      <span class="val">5</span>]</td>

  <td>Apply compound procedure to <span class="val">5</span></td>
</tr>

<tr>
  <th>4.</th>
  <td class="code">(<span class="enext">*</span> <span class="val">5</span> 
      <span class="val">5</span>)</td>
  <td>Evaluate <tt>*</tt></td>
</tr>
<tr>
  <th>5.</th>
  <td class="code">[<span class="val">mult</span>
           <span class="val">5</span>
	   <span class="val">5</span>]</td>

  <td>Apply primitive <span class="val">mult</span></td>
</tr>

<tr>
  <th>6.</th>
  <td class="code"><span class="val">25</span></td>

  <td><em>Evaluation complete</em></td>
</tr>
</tbody></table>

<p>Begin with step (1).  Since this is the evaluation of a compound
expression, the EVAL rule says we must first evaluate the
subexpressions.  The value obtained by evaluating the <tt>lambda</tt>
subexpression is a procedure object, denoted:

</p><p style="text-align: center">
  <span class="val">PROC ((x &lt;number&gt;)) (* x x)</span>
</p>

<p>At step (2), we determine that the value of the expression 5 is
<span class="val">5</span>.  Thus, after this first stage of
evaluation, our model reduces the initial expression to the
application of a procedure object to a value, illustrated at the
beginning of step (3).</p>

<p>The APPLY rule for a compound procedure says that we should
take the body of the procedure, which is <tt>(* x x)</tt>, and
<strong>substitute</strong> the corresponding arguments
everywhere the parameters appear.  The procedure has only one
parameter, <tt>x</tt>, and the argument in this case is <span class="val">5</span>.  If we replace each <tt>x</tt> with
<span class="val">5</span>, we have the next expression</p>

<p style="text-align: center">
  <tt>(* <span class="val">5</span> <span class="val">5</span>)</tt>
</p>

<p>Now we have another evaluation problem to solve.  Since this is a
compound expression, the EVAL rule says to evaluate the
subexpressions.  By the EVAL rule for identifiers, <tt>*</tt>
evaluates to <span class="val">mult</span>, which is a primitive
operator.  By the EVAL rule for values, the value <span class="val">5</span> evaluates to itself.  So, at step (5) we now have
the application of a primitive multiplication operator to a pair of
operands.</p>

<p>The APPLY rule for primitive operators says to apply the operation
to the arguments directly, which results in the value <span class="val">25</span>.  At this point, we have a primitive value,
which cannot be reduced any further, so we are finished with
evaluation.</p>

<p>Notice how the process involves the alternation of evaluation and
application.  We will return to this idea later in the term.</p>

<hr>

<h2><a name="special_forms"></a>Special Forms</h2>

<p>The evaluation rules described <a href="#eval_rules"> above</a>
handle the evaluation of most Scheme expressions.  There are a number
of <span class="def">special forms</span>, however, which do not obey
the same rules.  A special form is defined, in fact, as being an
expression which has its own evaluation rule.  We'll now consider one
of these special forms, and describe a method for dealing with special
forms in general.</p>

<h3><a name="sf_define"></a>define</h3>

<p>A <span class="def">define</span> expression has one of the
following forms:</p>

<pre><code>
  (define <span class="param">id</span> <span class="param">expr</span>)
  (define (<span class="param">fname p1 p2 ... pk</span>) 
    <span class="param">expr-list</span>)
</code></pre>

<p>The first argument of <strong>define</strong> must be</p>

<ol>
  <li>An identifier, or
  </li><li>A list consisting of one or more identifiers
  <sup><a name="fn1ref"></a><a href="#fn1">1</a></sup>
</li></ol>

<p>Essentially, the evaluation rule for <strong>define</strong>
is:</p>

<ol>
  <li>If the first argument is neither an identifier nor a list
  consisting of identifiers, it is an error.

  </li><li>If the first argument is a single identifier <span class="param">id</span>
  <ol>
    <li>Evaluate <span class="param">expr</span>
    </li><li>Bind the identifier to the resulting value.
  </li></ol>
  </li><li>Otherwise, 
  <ol>
    <li>Evaluate the expression 
       <tt>(lambda (<span class="param">p1 p2 ... pk</span>)
       <span class="param">expr-list</span>)</tt>
    </li><li>Bind identifier <span class="param">fname</span> to the
    resulting procedure object.
  </li></ol>
</li></ol>

<p>Notice that the first argument is <strong>not evaluated </strong>.
Ordinarily, evaluating an identifier would result in looking it up in
a table and returning the associated value.  But the point of
<strong>define</strong> is to create a new such association, so it
does not make sense to evaluate the name it is trying to define.</p>

<p>If we were to evaluate the following expressions,</p>

<pre><code>
(define a 2)
(define square 
  (lambda ((x &lt;number&gt;)) (* x x)))
(define cube 
  (lambda ((x &lt;number&gt;)) (* x x x)))
</code></pre>

<p>then the table of variables might look something like this:</p>

<pre><code>
Name          Value
------------- ----------------------------------------------
+             mult
*             add
=             equals
.             .
.             .
.             .
a             2
square        PROC ((x &lt;number&gt;)) (* x x)
cube          PROC ((x &lt;number&gt;)) (* x x x)
</code></pre>

<p>Each entry or <span class="def">binding</span> in the table
consists of a name and an associated value.  Some of these
bindings are present from the time the Scheme evaluator starts
up (for instance, the built-in primitive operations), and others
are added by evaluating <strong>define</strong> expressions.</p>

<p><a name="fn1"></a><sup><a href="#fn1ref">1</a></sup>
Actually, it is a bit more complex than this; for the complete syntax
of <tt>define</tt>, look in 
<a href="http://www.swiss.ai.mit.edu/~jaffer/r5rs_7.html#SEC44"> 
Section 5.2</a> of the 
<a href="http://www.swiss.ai.mit.edu/~jaffer/r5rs_toc.html">
R5RS</a>.</p>

<hr>

<h3><a name="example2"></a>A More Complex Example</h3>

<p>Given the above definitions, consider the evaluation of</p>

<pre><code>
  (cube (square a))
</code></pre>

<p>As before, here is how the evaluation process unfolds:</p>

<table class="submodel">
<tbody><tr>
  <th class="top">Step</th>
  <th class="top">Expression</th>
  <th class="top">Rule</th>
</tr>
<tr>
  <th>1.</th>
  <td class="code">(<span class="enext">cube</span> (square a))</td>

  <td>Evaluate <tt>cube</tt></td>
</tr>
<tr>
  <th>2.</th>
  <td class="code">(<span class="val">PROC ((x &lt;number&gt;)) 
      (* x x x)</span> <span class="enext">(square a)</span>)</td>

  <td>Evaluate <tt>(square a)</tt></td>
</tr>

<tr>
  <th>3.</th>
  <td class="code">( ... [<span class="val">PROC ((x &lt;number&gt;)) 
     (* x x)</span> <span class="val">2</span>])</td>

  <td>Apply compound proc to <span class="val">2</span></td>
</tr>

<tr>
  <th>4.</th>
  <td class="code">( ... <span class="enext">(* <span class="val">2</span>
      <span class="val">2</span>)</span>)</td>

  <td>Evaluate <tt>(* <span class="val">2</span> 
     <span class="val">2</span>)</tt></td>
</tr>

<tr>
  <th>5.</th>
  <td class="code">( ... [<span class="val">mult</span> 
      <span class="val">2</span> <span class="val">2</span>])</td>

  <td>Apply <span class="val">mult</span> to get 
     <span class="val">4</span></td>
</tr>

<tr>
  <th>6.</th>
  <td class="code">[<span class="val">PROC ((x &lt;number&gt;)) (* x x x)</span>
      <span class="val">4</span>]</td>

  <td>Apply compound proc to <span class="val">4</span></td>
</tr>

<tr>
  <th>7.</th>
  <td class="code">(<span class="enext">*</span> 
      <span class="val">4</span>
      <span class="val">4</span>
      <span class="val">4</span>)</td>

  <td>Evaluate all subexpressions</td>
</tr>

<tr>
  <th>8.</th>
  <td class="code">[<span class="val">mult</span> 
      <span class="val">4</span> <span class="val">4</span> 
      <span class="val">4</span>]</td>

  <td>Apply <span class="val">mult</span></td>
</tr>

<tr>
  <th>9.</th>
  <td><span class="val">64</span></td>

  <td><em>Evaluation complete</em></td>
</tr>
</tbody></table>

<p>The first stage in evaluating this expression involves evaluation
of its two subexpressions, the second of which is a compound
expression (while we have evaluated them from left to right, the
Scheme interpreter may actually evaluate them in any order).  Notice
that we have compressed a few steps in each line, so we don't have to
show the evaluation of each of the <span class="val">4</span>'s, for
instance.</p>

<p>The main point of interest here is the lookup of the names
<tt>cube, square,</tt> and <tt>a</tt> which were defined above.  The
rest of the details are similar to <a href="#example1">the earlier
example</a>.</p>

<h3><a name="example3"></a>
An Example with Higher-Order Procedures</h3>

<p>Not all values are numbers -- suppose we evaluate the following
expressions:</p>

<pre><code>
(define foo square)
(define do-to-5
  (lambda ((f &lt;function&gt;)) 
    (f 5)))
</code></pre>

<p>Evaluation of these expressions associates procedure objects with
the names <tt>foo</tt> and <tt>do-to-5</tt>.  This adds two new
pairings to our hypothetical lookup table:</p>

<pre><code>
Name          Value
------------- ----------------------------------------------
+             mult
*             add
=             equals
.             .
.             .
.             .
a             2
square        PROC ((x &lt;number&gt;)) (* x x)
cube          PROC ((x &lt;number&gt;)) (* x x x)
.             .
.             .
.             .
foo           PROC ((x &lt;number&gt;)) (* x x)
do-to-5       PROC ((f &lt;function&gt;)) (f 5)
</code></pre>

<p>Now, suppose we trace the evaluation of this expression:</p>

<pre><code>
 (do-to-5 foo)
</code></pre>

     <p>The evaluation proceeds in the following manner:</p>

<table class="submodel">
 <tbody><tr>
  <th class="top">Step</th>
  <th class="top">Expression</th>
  <th class="top">Rule</th>
</tr>
<tr>
  <th>1.</th>
  <td class="code">(<span class="enext">do-to-5</span> 
      <span class="enext">foo</span>)</td>

  <td>Evaluate <tt>do-to-5</tt> and <tt>foo</tt></td>
</tr>

<tr>
  <th>2.</th>
  <td class="code">[<span class="val">PROC ((x &lt;number&gt;)) (f 5)</span>
      <span class="val">PROC ((x &lt;number&gt;)) (* x x)</span>]</td>

  <td>Apply the first proc to the second</td>
</tr>

<tr>
  <th>3.</th>
  <td class="code">(<span class="val">PROC ((x &lt;number&gt;)) 
      (* x x)</span> <span class="enext">5</span>)</td>

  <td>Evaluate 5</td>
</tr>

<tr>
  <th>4.</th>
  <td class="code">[<span class="val">PROC ((x &lt;number&gt;)) 
      (* x x)</span> <span class="val">5</span>]</td>

  <td>Apply the proc to <span class="val">5</span></td>
</tr>

<tr>
  <th>5.</th>
  <td class="code">(<span class="enext">*</span> <span class="val">5</span> 
      <span class="val">5</span>)</td>

  <td>Evaluate <tt>*</tt> and the <span class="val">5</span>'s</td>
</tr>

<tr>
  <th>6.</th>
  <td class="code">[<span class="val">mult</span> 
      <span class="val">5</span> <span class="val">5</span>]</td>

  <td>Apply <span class="val">mult</span></td>

</tr>

<tr>
  <th>3.</th>
  <td><span class="val">25</span></td>

  <td><em>Evaluation complete</em></td>
</tr>
</tbody></table>

<p>The important thing to note here is that procedures, just like any
other value, can be substituted into the bodies of other procedures.
Thus, in Step (1), when we evaluate the expressions <tt>do-to-5</tt>
and <tt>foo</tt>, we obtain the procedure objects from the lookup
table.  Next, we apply the leftmost procedure to the remaining
arguments; in this case, the argument is itself a procedure, which is
substituted directly for the formal parameter <tt>f</tt>.  The
remainder of the substitution is as before.</p>

<hr>

<h3><a name="sf_cond"></a>Conditionals</h3>

<p>Conditional expressions, that is, those which evaluate only some of
their arguments, are also special forms, and so by definition have
their own evaluation rules.  Let us look at the evaluation rule for
the <strong>if</strong> special form:</p>

<pre><code>
  (if <span class="param">predicate consequent alternate</span>)
</code></pre>

<p>The rule for evaluating <tt>if</tt> is as follows:</p>

<ol>
  <li>Evaluate the <span class="param">predicate</span> expression.

  </li><li>If the resulting value is true (i.e., not <tt>#f</tt>), then
   evaluate <span class="param">consequent</span> and return its
   value.

  </li><li>Otherwise, evaluate <span class="param">alternate</span> and
  return its value.
</li></ol>

<p>In particular, notice that we never evaluate both the consequent
and the alternate (if we used the default rule, we would evaluate
both, and then return one value or the other).  For example, consider
the following:</p>

<pre><code>
(define abs 
  (lambda ((n &lt;number&gt;))
    (if (&lt; n 0)
        (- n)
        n)))
</code></pre>

<p>Suppose we now evaluate the expression <tt>(abs -2)</tt>.</p>

<table class="submodel">
 <tbody><tr>
  <th class="top">Step</th>
  <th class="top">Expression</th>
  <th class="top">Rule</th>
</tr>
<tr>
  <th>1.</th>
  <td class="code">(abs -2)</td>

  <td>Evaluate <tt>abs</tt> and <tt>-2</tt></td>
</tr>

<tr>
  <th>2.</th>
  <td class="code">[<span class="val">PROC ((n &lt;number&gt;)) (if (&lt;
  n 0) (- n) n)</span> <span class="val">-2</span>]</td>

  <td>Apply procedure to <span class="val">-2</span></td>
</tr>

<tr>
  <th>3.</th>
  <td class="code">(if <span class="enext">(&lt; <span class="val">-2</span> 0)
      </span> (- <span class="val">-2</span>) <span class="val">-2</span>)</td>

  <td>Evaluate <tt>(&lt; <span class="val">-2</span> 0)</tt></td>
</tr>

<tr>
  <th>4.</th>
  <td class="code">(if [<span class="val">lessthan</span>
      <span class="val">-2</span> <span class="val">0</span>] 
      (- <span class="val">-2</span>) <span class="val">-2</span>)</td>

  <td>Apply <span class="val">lessthan</span></td>
</tr>

<tr>
  <th>5.</th>
  <td class="code">(if <span class="val">true</span> 
      <span class="enext">(- <span class="val">-2</span>)</span> 
      <span class="val">-2</span>)</td>

  <td>Result true, evaluate consequent</td>
</tr>

<tr>
  <th>6.</th>
  <td class="code">(- <span class="val">-2</span>)</td>
  <td>Evaluate <tt>-</tt></td>
</tr>

<tr>
  <th>7.</th>
  <td class="code">[<span class="val">sub</span> 
      <span class="val">-2</span>]</td>

  <td>Apply subtraction</td>
</tr>

<tr>
  <th>8.</th>
  <td><span class="val">2</span></td>

  <td><em>Evaluation complete</em></td>
</tr>
</tbody></table>

<p>In steps (3-5), we evaluate the predicate of the <tt>if</tt>
expression, and determine that its value is <em>true</em>.  Therefore,
steps (6-8) are evaluating the <strong>consequent</strong> expression,
and the alternate is never touched.  This is because of the special
rule for <tt>if</tt> described above -- it does not follow the normal
order of evaluations.</p>

<p>The <strong>cond</strong> special form is similar in spirit,
although more complicated.  Each test is evaluated, in sequence, until
a true one is found.  The corresponding sequence of consequent
expressions is then evaluated, and the value of the last expression in
the sequence is returned as the value of the <tt>cond</tt> expression.
None of the consequent expressions for any other test get
evaluated.</p>

<hr>
[an error occurred while processing this directive]
<hr>
[an error occurred while processing this directive]



</body></html>Ytext/html    ( F ] l ~ î ö õ Êo0                           o: