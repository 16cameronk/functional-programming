Topic: Tail Recursion, Higher-Order Functions
Date: Jan. 24, 2014
Examples: fibrec.scm, repeated.scm


--- Higher-order Functions

In class, we worked through the definitions of some useful
higher-order functions.  These are a few for reference (they are
also in repeated.scm).

  ;; Create a constant function that returns 'thing'
  (define constantly
    (lambda (thing)
      (lambda (x) thing)))

  ;; Make a function that adds n to its argument
  (define make-adder
    (lambda ((n <number>))
      (lambda ((x <number>))
        (+ x n))))

  ;; Create a function composing f and g, assuming f and g
  ;; are procedures taking one argument...
  (define compose
    (lambda ((f <function>) (g <function>))
      (lambda (thing)
        (f (g thing)))))

  ;; Repeated composition:  Iterate f, n times, on x
  ;; Preconditions:  f takes one argument, n >= 0.
  (define repeated
    (lambda ((f <function>) (n <integer>))
      (if (zero? n)
          identity
          (compose f (repeated f (- n 1))))))

  ;; Of course, the identity function is just the function that
  ;; returns its argument.
  (define identity
    (lambda (thing) thing))

Interesting questions for study:

1. A simple warm-up exercise: 
   Define a procedure that returns the negation of a procedure.

   So, if (f x) ==> #f, then ((negation f) x) ==> #t, and otherwise
   ((negation f) x) ==> #f.  Assume f takes one parameter, for now.

   Useful:  Built-in 'not' procedure (covered this in the 1st sect.)

   Possible solution:

   (define negation
     (lambda ((f <function>))
       (lambda (x)
         (not (f x)))))

   Example:
     (define even?
       (lambda ((z <integer>))
         (= (modulo z 2) 0)))

     (define odd? (negation even?))

   Note: It might be more useful to define a version of this for
   two-argument functions, so that you could define negated
   comparisons, for instance.  

   We'll talk next week about how to deal with functions that have
   variable numbers of arguments.

2. The definition of 'repeated' (above) is not tail recursive; after
   the recursive call, 'compose' is called again.

   Design a tail-recursive one.

   Possible solution:

   (define repeated-tail
     (lambda ((f <function>) (n <integer>))
       (let loop ((times-left n) (result identity))
         (if (zero? count)
	     result
	     (loop (- times-left 1)
		   (compose f result))))))

   There are some other examples of how to do the same thing WITHOUT
   using compose, to be found in repeated.scm

--- Another cool higher-order function example to play with:

Consider this expression:
  ((lambda (x) (x x)) (lambda (x) (x x)))

Q: What does this do?  Think about it for a few minutes quietly, see
   if you can work it out.

A: In the event nobody can explain it, the solution can be found in
   the Substitution Model:

   ((lambda (x) (x x)) (lambda (x) (x x))) ==>
   ( {proc (x) (x x)} (lambda (x) (x x)) ) ==>
   [ {proc (x) (x x)} {proc (x) (x x)} ]   ==>
   ( {proc(x) (x x)} {proc (x) (x x)} )    ==>
   [ {proc(x) (x x)} {proc (x) (x x)} ]    ==>
   ( {proc(x) (x x)} {proc (x) (x x)} )    ==>
   [ {proc(x) (x x)} {proc (x) (x x)} ]    ==>  ... ad infinitum ...

In other words, it's a fancy do-nothing infinite loop.  Who said
everything had to be for a serious purpose? :)

In the days of BASIC, one of the first programs people would write, to
prove their intellectual superiority over the machine or something,
was:

	10 PRINT "HELLO";
	20 GOTO 10

An infinite loop.  Ha ha, watch the silly machine do almost nothing.
And here you thought higher-order functions couldn't be entertaining?
:)

---Map and Accumulate

Define map and accumulate functions using list operations (discussed
in SICP 2.2.1 and 2.2.3).

;; Accumulates the elements of a list according to some binary operation and some
;; initial value

(define accumulate
   (lambda (initial op l)
      (cond ((null?) l) initial)
        (else
          (op (car l) (accumulate base op (cdr l))))))
          
;; Takes a procedure of one operation and a list, returns
;; a list of the results produced by applying the procedure
;; to each element in the list

(define map
  (lambda (f l)
    (cond ((null? l) l)
      (else (cons (f (car l))
                  (map f (cdr l)))))))

--- Tail recursion

 (Only do this material if you did not get through this material in
 the last section. If you did get through it, concentrate on "Higher Order
 Functions", Above.)

The Fibonacci sequence is defined by these equations:

  F(0) = 0
  F(1) = 1
  F(k) = F(k-1) + F(k-2) for all integers k > 1.

Here is a simple function to compute the kth Fibonacci number:

  ;; Precondition:  k >= 0
  (define fib1
    (lambda ((k <integer>))
      (if (< k 2)
          k
          (+ (fib1 (- k 1))
             (fib1 (- k 2))))))

Obviously, this is not tail-recursive, for two reasons: One of the two
recursive calls has to happen first, so the other one is a deferred
operation while that happens; and, also, the sum must be taken after
the second recursive call completes.

How can we make it tail-recursive?

Hints:
1. Observe what happens if you make a table as follows:

   k   F(k-1)  F(k-2)   F(k)
   0   undef   undef    0
   1   0       undef    1
   2   1       0        1
   3   1       1        2
   4   2       1        3
   5   3       2        5
   6   5       3        8
   ...

2. At each step of the table, you are only looking at two values --
   the previous two entries in the F(k) column.

3. So, suppose we keep track of those entries, say, call them:
   last    -- the row just before the current row
   prev    -- the row just before the 'last' row
   current -- the value last + prev

   To get the next value,

   a. the new value of 'last' gets the old value of 'prev'
   b. the new value of 'prev' gets the current value
   c. the current value gets recomputed with these new entries.

This leads (hopefully) to a solution with a helper function:


  (define fib2-hf
    (lambda ((k <integer>))
      (letrec ((loop (lambda (count last prev)
		       (if (= count k)
                           last
			   (loop (+ count 1)
				 prev
				 (+ last prev))))))
        (loop 0 0 1))))

Or, using named LET (which I find harder to read, but you may see. I
think this is ugly, and prefer LETREC, but here it is):

  (define fib2-nl
    (lambda ((k <integer>))
      (let loop ((count 0) (last 0) (prev 1))
        (if (= count k)
	    last
	    (loop (+ count 1)
                  prev
                  (+ last prev))))))

